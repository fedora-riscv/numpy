diff -up numpy-1.8.2/numpy/core/blasdot/python_xerbla.c.xerbla numpy-1.8.2/numpy/core/blasdot/python_xerbla.c
--- numpy-1.8.2/numpy/core/blasdot/python_xerbla.c.xerbla	2015-01-12 11:04:43.981867493 -0700
+++ numpy-1.8.2/numpy/core/blasdot/python_xerbla.c	2015-01-12 11:04:43.980867500 -0700
@@ -0,0 +1,51 @@
+#include "Python.h"
+
+/*
+ * From f2c.h, this should be safe unless fortran is set to use 64
+ * bit integers. We don't seem to have any good way to detect that.
+ */
+typedef int integer;
+
+/*
+  From the original manpage:
+  --------------------------
+  XERBLA is an error handler for the LAPACK routines.
+  It is called by an LAPACK routine if an input parameter has an invalid value.
+  A message is printed and execution stops.
+
+  Instead of printing a message and stopping the execution, a
+  ValueError is raised with the message.
+
+  Parameters:
+  -----------
+  srname: Subroutine name to use in error message, maximum six characters.
+          Spaces at the end are skipped.
+  info: Number of the invalid parameter.
+*/
+
+int xerbla_(char *srname, integer *info)
+{
+        static const char format[] = "On entry to %.*s" \
+                " parameter number %d had an illegal value";
+        char buf[sizeof(format) + 6 + 4];   /* 6 for name, 4 for param. num. */
+
+        int len = 0; /* length of subroutine name*/
+#ifdef WITH_THREAD
+        PyGILState_STATE save;
+#endif
+
+        while( len<6 && srname[len]!='\0' )
+                len++;
+        while( len && srname[len-1]==' ' )
+                len--;
+#ifdef WITH_THREAD
+        save = PyGILState_Ensure();
+#endif
+        PyOS_snprintf(buf, sizeof(buf), format, len, srname, *info);
+        PyErr_SetString(PyExc_ValueError, buf);
+#ifdef WITH_THREAD
+        PyGILState_Release(save);
+#endif
+
+        return 0;
+}
diff -up numpy-1.8.2/numpy/core/setup.py.xerbla numpy-1.8.2/numpy/core/setup.py
--- numpy-1.8.2/numpy/core/setup.py.xerbla	2015-01-12 11:04:43.978867512 -0700
+++ numpy-1.8.2/numpy/core/setup.py	2015-01-12 15:35:42.593240782 -0700
@@ -947,12 +947,13 @@ def configuration(parent_package='',top_
         if blas_info:
             if ('NO_ATLAS_INFO', 1) in blas_info.get('define_macros', []):
                 return None # dotblas needs ATLAS, Fortran compiled blas will not be sufficient.
-            return ext.depends[:1]
+            return ext.depends[:2]
         return None # no extension module will be built
 
     config.add_extension('_dotblas',
                          sources = [get_dotblas_sources],
                          depends = [join('blasdot', '_dotblas.c'),
+                                  join('blasdot', 'python_xerbla.c'),
                                   join('blasdot', 'cblas.h'),
                                   ],
                          include_dirs = ['blasdot'],
diff -up numpy-1.8.2/numpy/linalg/tests/test_linalg.py.xerbla numpy-1.8.2/numpy/linalg/tests/test_linalg.py
--- numpy-1.8.2/numpy/linalg/tests/test_linalg.py.xerbla	2014-08-05 12:04:19.000000000 -0600
+++ numpy-1.8.2/numpy/linalg/tests/test_linalg.py	2015-01-12 11:04:43.981867493 -0700
@@ -1108,6 +1108,8 @@ def test_xerbla_override():
     # and may, or may not, abort the process depending on the LAPACK package.
     from nose import SkipTest
 
+    XERBLA_OK = 255
+
     try:
         pid = os.fork()
     except (OSError, AttributeError):
